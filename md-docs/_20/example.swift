// Get the database (and create it if it doesnâ€™t exist).
let database: Database
do {
    database = try Database(name: "mydb")
} catch {
    fatalError("Error opening database")
}

// Create a new document (i.e. a record) in the database.
var mutableDoc = MutableDocument()
    .setString("SDK", forKey: "title")

// Save it to the database.
var document: Document
do {
    document = try database.saveDocument(mutableDoc)
} catch {
    fatalError("Error saving document")
}

// Update a document.
mutableDoc = document.toMutable()
mutableDoc.setString("Swift", forKey: "language")
do {
    document = try database.saveDocument(mutableDoc)
} catch {
    fatalError("Error updating document")
}

// Log the document ID (generated by the database)
// and properties
print("Document ID :: \(document.id)")
print("Learning \(document.string(forKey: "language"))")

// Create replicators to push and pull changes to and from the cloud.
let targetEndpoint = URLEndpoint(url: URL(string: "ws://localhost:4984/example_sg_db")!)
let replConfig = ReplicatorConfiguration(database: database, target: targetEndpoint)
replConfig.replicatorType = .pushAndPull

// Add authentication.
replConfig.authenticator = BasicAuthenticator(username: "john", password: "pass")

// Create replication.
replication = Replicator(config: replConfig)

// Listen to database change events.
replication?.addChangeListener { (change) in
    if let error = change.status.error as NSError? {
        print("Error code :: \(error.code)")
    }
}

// Start replication.
replication?.start()
